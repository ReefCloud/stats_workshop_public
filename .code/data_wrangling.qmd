---
title: "Data wrangling and visualisation"
author: "Murray Logan"
date: today
date-format: "DD/MM/YYYY"
format: 
  html:
    ## Format
    theme: spacelab
    css: ../resources/ws_style.css
    html-math-method: mathjax
    ## Table of contents
    toc: true
    toc-float: true
    ## Numbering
    number-sections: true
    number-depth: 3
    ## Layout
    fig-caption-location: "bottom"
    fig-align: "center"
    fig-width: 4
    fig-height: 4
    fig-dpi: 72
    tbl-cap-location: top
    ## Code
    code-fold: false
    code-tools: true
    code-summary: "Show the code"
    code-line-numbers: true
    code-block-border-left: "#ccc"
    highlight-style: zenburn
    ## Execution
    execute:
      echo: true
      cache: false
    ## Rendering
    embed-resources: true
crossref:
  fig-title: '**Figure**'
  fig-labels: arabic
  tbl-title: '**Table**'
  tbl-labels: arabic
engine: knitr
output_dir: "docs"
documentclass: article
fontsize: 12pt
mainfont: Arial
mathfont: LiberationMono
monofont: DejaVu Sans Mono
classoption: a4paper
bibliography: ../resources/references.bib
---

```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(cache.lazy = FALSE,
                      tidy = "styler")
options(tinytex.engine = "xelatex")
```

# Preparations
Load the necessary libraries

```{r}
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false

library(tidyverse)
library(easystats)
library(knitr)
library(sf)
library(rnaturalearth)
library(maps)
library(ggspatial)
source('helperFunctions.R')
```

# Scenario

For this exercise we will be working with a processed extract from the
ReefCloud database. The data represent machine learning point
classifications for select sampling sites within the Great Barrier
Reef - specifically a subset of sites in the Cairns region. We will
use these data to motivate an exploration of data wrangling and
visualisation techniques within R.

The goal of this exercise will be to use this data set to explore data
wrangling and summarisation (both tabular and graphical).

# Read in the data

We will start off by reading in the `CairnsReef_subset_processed.csv` data.  There are many functions
in R that can read in a CSV file.  We will use a the `read_csv()` function as it
is part of the tidyverse ecosystem.

```{r}
#| label: readData
dat <- read_csv("../data/CairnsReefs_subset_processed.csv", trim_ws = TRUE)
```

<!-- START_PRIVATE-->
After reading in a dataset, it is always a good
idea to quickly explore a few summaries in order to ascertain whether
the imported data are correctly transcribed. In particular, we should
pay attention to whether there are any unexpected missing values and
ensure that each variable (column) has the expected class (e.g. that
variables we expected to be considered numbers are indeed listed as
either `<dbl>` or `<int>` and not `<char>`).
<!-- END_PRIVATE-->

::: {.panel-tabset}

## glimpse
```{r}
#| label: examinData
dat |> glimpse() 
```

## head
```{r}
#| label: examinData1
## Explore the first 6 rows of the data
dat |> head() 
```

## str
```{r}
#| label: examinData2
dat |> str() 
```

## Easystats (datawizard)
```{r}
#| label: examinData3
dat |> datawizard::data_codebook() |> knitr::kable() 
```
:::

There are a large number of fields (columns) in this dataset, many of
which we are going to ignore for this exercise. The important fields
are:

- `Reef_id` - a unique identifier of the reef
- `site_id` - a unique identifier of the site
- `site_name` - a unique name of the site
- `site latitude` - latitude of the site
- `site_longitude` - longitude of the site
- `survey_start_date` - date (and time) of survey
- `Year` - the survey year
- `survey_depth` - depth at which the survey took place
- `transect_id` - unique identifier of the transect
- `type` - whether the observation is from human or machine learning classification
- `GROUP` - high level functional group - only `HC` (Hard coral here)
- `COUNT` - sum number of points classified as `HC` per transect
- `TOTAL` - total number of image points per transect


# Data wrangling

@Wickham-2014-59 suggested that there are many ways to organise data,
yet tidy data (data that are structured in such a consistent way as to
facilitate analyses) must adhere to a fairly strict set of structural
rules. Specifically, in tidy data: 

- **variables** are in columns
- **observations** are in rows - that is, for univariate data, there
  should be a separate row for each response observation.

![](../resources/tidy1Tikz-1.png)

To achieve tidy data, common data preparations include:

- Reshaping and rearranging data
- Merging multiple data sources
- Aggregating data to appropriate spatial/temporal scales
- Transforming data and deriving new variables
- Sorting and reordering data
- Relabelling data

This workshop will concentrate on these essential data preparation
phases.


The great folks over at Rstudio have produced an excellent set of
[cheatsheets](https://www.rstudio.com/resources/cheatsheets) on a
range of topics.  For this tutorial, the **Data Transformation Cheat
Sheet** and **Data Tidying Cheat Sheet** (mainly just the first page)
are useful summaries.

::: {.panel-tabset}

## Data importation

<https://github.com/rstudio/cheatsheets/raw/main/data-import.pdf>
![](../resources/data-import-0.png "data-import")
![](../resources/data-import-1.png "data-import")

## Data transformations

<https://github.com/rstudio/cheatsheets/raw/main/data-transformation.pdf>
![](../resources/data-transformation-0.png "data-transformation")
![](../resources/data-transformation-1.png "data-transformation")

## Tidy data

<https://github.com/rstudio/cheatsheets/raw/main/tidyr.pdf>
![](../resources/tidyr-0.png "tidyr")
![](../resources/tidyr-1.png "tidyr")

## Working with factors

<https://github.com/rstudio/cheatsheets/raw/main/factors.pdf>
![](../resources/factors.png "factors")

## Working with time/dates

<https://github.com/rstudio/cheatsheets/raw/main/lubridate.pdf>
![](../resources/lubridate-0.png "lubridate")
![](../resources/lubridate-1.png "lubridate")

## Functional programming (`purrr`)

<https://github.com/rstudio/cheatsheets/raw/main/purrr.pdf>
![](../resources/purrr-0.png "purrr")
![](../resources/purrr-1.png "purrr")

## Regular expression 

<https://github.com/rstudio/cheatsheets/raw/main/regex.pdf>
![](../resources/regex.png "regex")

## Strings

<https://github.com/rstudio/cheatsheets/raw/main/strings.pdf>
![](../resources/strings-0.png "strings")
![](../resources/strings-1.png "strings")

## Tidy evaluation

<https://github.com/rstudio/cheatsheets/raw/main/tidyeval.pdf>
![](../resources/tidyeval-0.png "tidyeval")
![](../resources/tidyeval-1.png "tidyeval")

:::

# tidyverse - a data manipulation ecosystem within R

There are numerous packages and base R routines devoted to data
manipulation. Notable packages include data.tables, plyr, dplyr and
doBy. Indeed, earlier versions of this tutorial featured examples of
each of these packages. However, an entire family of packages from
Hadley Wickem’s group now stands out as a comprehensive, intuitive
suite of tools for data manipulation and visualisation.

Importantly, all of these packages are designed to integrate together
and complement one another with a consistent interface. To simplify
installing an entire data ecosystem, the tidyverse package is
available. Installing this package (via install.packages('tidyverse'))
will install the following packages (bold entries are automatically
loaded into the global environment when loading the tidyverse
package):

- `dplyr` - for dataframe manipulation
- `tidyr` - for data tidying
- `readr` - for importing data
- `ggplot2` - for visualising data
- `purrr` - for functional programming
- `tibble` - for tibbles
- `stringr` - for string manipulation
- `forecats` - for factor (categorical) manipulation
- `lubridate` - for dates/times manipulation
- `hmms` - for time manipulation
- `broom` - for tidying model outputs
- `DBI` - for database interactions
- `haven` - for importing SAS, SPSS and Stata files
- `httr` - for web API’s
- `jsonlite` - for working with JSON
- `rvest` - for web scraping
- `xml2` - for manipulating XML structures
- `modelr` - for model manipulation


The `tidyverse` ecosystem of data manipulation routines adopts the
unix philosophy of having each tool (in this case function) only
perform one task. This way, each function is relatively easy to use.
In order to achieve more complex manipulations, the functions can be
piped together.

That said, we will start off exploring single functions at a time
before we start to chain them together.

<https://github.com/rstudio/cheatsheets/raw/master/data-transformation.pdf>

The important data manipulation functions that we will focus on here are...

+--------------------------+-----------------------------------+------------+
|Task                      |Function                           |Package     |
+==========================+===================================+============+
|Sorting                   |`arrange()`                        |**dplyr**   |
+--------------------------+-----------------------------------+------------+
|Adding columns            |`mutate()`                         |**dplyr**   |
+--------------------------+-----------------------------------+------------+
|Transformations           |`mutate()`                         |**dplyr**   |
+--------------------------+-----------------------------------+------------+
|Re-ordering factor levels |`factor(,levels=)`                 |base        |
+--------------------------+-----------------------------------+------------+
|Re-labelling              |`factor(,lab=)`                    |base        |
+--------------------------+-----------------------------------+------------+
|                          |`recode()`                         |**dplyr**   |
+--------------------------+-----------------------------------+------------+
|Re-naming columns         |`rename(,replace=)`                |**dplyr**   |
+--------------------------+-----------------------------------+------------+
|Filtering/Subsetting      |indexing                           |base        |
+--------------------------+-----------------------------------+------------+
|~ columns                 |`select(,...)`                     |**dplyr**   |
+--------------------------+-----------------------------------+------------+
|                          |`pull(,...)`                       |**dplyr**   |
+--------------------------+-----------------------------------+------------+
|~ rows                    |`filter(,...)`                     |**dplyr**   |
+--------------------------+-----------------------------------+------------+
|Unique combinations       |`distinct()`                       |**dplyr**   |
+--------------------------+-----------------------------------+------------+
|Reshaping data            | `pivot_longer()`, `pivot_wider()` | **tidyr**  |
+--------------------------+-----------------------------------+------------+
|Split/combine columns     | `separate()`, `unite()`           | **tidyr**  |
+--------------------------+-----------------------------------+------------+
|Aggregating               |`group_by()` `summarise()`         |**dplyr**   |
+--------------------------+-----------------------------------+------------+
|                          |`group_by()` `count()`             |**dplyr**   |
+--------------------------+-----------------------------------+------------+
|Merging/joining           |`*_join()`                         |**dplyr**   |
+--------------------------+-----------------------------------+------------+
|Extracting data structure |`expand()`                         |**tidyr**   |
+--------------------------+-----------------------------------+------------+
|                          |`crossing()`                       |**tidyr**   |
+--------------------------+-----------------------------------+------------+
: {.table-pretty}

## Sorting data (`arrange`)

![](../resources/tikz_arrange-1.png)

Lets sort by COUNT in ascending order

```{r, mhidden=TRUE}
#| label: arrange
dat |>
  arrange(COUNT) |>
  as.data.frame() |> 
  head()
```

What about by COUNT in descending order

```{r, mhidden=TRUE}
#| label: arrange2
dat |>
  arrange(desc(COUNT)) |>
  as.data.frame() |> 
  head()
```

Or even by percent cover (COUNT/TOTAL) in descending order

```{r, mhidden=TRUE}
#| label: arrange3
dat |>
  arrange(desc(COUNT/TOTAL)) |>
  as.data.frame() |> 
  head()
```

Finally, we can also sort by multiple fields

```{r, mhidden=TRUE}
#| label: arrange4
dat |>
  arrange(site_latitude, desc(COUNT/TOTAL)) |>
  as.data.frame() |> 
  head()
```

## Adding/modifying columns (mutate)

![](../resources/tikz_mutate-1.png)

- Add derived fields

```{r, mhidden=TRUE}
#| label: mutate1
dat |>
  dplyr::mutate(cover = COUNT/TOTAL) |> 
  as.data.frame() |> 
  head()
```

```{r, mhidden=TRUE}
#| label: mutate2
dat |>
  dplyr::mutate(cover = COUNT/TOTAL,
    fCover = ifelse(cover > 0.4, "High", "low")) |> 
  as.data.frame() |> 
  head()
```

```{r, mhidden=TRUE}
#| label: mutate3
dat |>
  dplyr::mutate(cover = COUNT/TOTAL,
    fCover = case_when(
      cover <= 0.1 ~"Low",
      cover > 0.1 ~ "Medium",
      cover > 0.4 ~ "High")
    ) |> 
  as.data.frame() |> 
  head()
```

- Alter the class of fields

```{r, mhidden=TRUE}
#| label: mutate4
dat |>
  dplyr::mutate(fYear = factor(Year)) |> 
  head()
```

- Across multiple fields at once

```{r, mhidden=TRUE}
#| label: mutate5
dat |>
  dplyr::mutate(across(where(is.character), factor)) |> 
  head()
```

```{r, mhidden=TRUE}
#| label: mutate6
dat |>
  dplyr::mutate(across(c(where(is.character), site_id, transect_id),
    factor)) |> 
  head()
```

## Summarising

![](../resources/tikz_summarise-1.png)

- Counting functions

```{r, mhidden=TRUE}
#| label: summarise1
dat |>
  summarise(
    N = n(),
    NSites = n_distinct(site_name)
  )
```

- summarising functions

```{r, mhidden=TRUE}
#| label: summarise2
dat |>
  summarise(
    Mean = mean(COUNT/TOTAL),
    Median = median(COUNT/TOTAL)
    )
```

- across multiple variables

```{r, mhidden=TRUE}
#| label: summarise3
dat |>
  summarise(
    across(c(COUNT, TOTAL),
      list(mean = mean, median = median))
    )
```

```{r, mhidden=TRUE}
#| label: summarise4
dat |>
  summarise(
    across(where(is.character), n_distinct)
    )
```

## Grouping

![](../resources/tikz_groupby-1.png)


```{r, mhidden=TRUE}
#| label: groupby
dat |>
  group_by(Reef_id, Year)
```

```{r, mhidden=TRUE}
#| label: groupby1
dat |>
  group_by(Reef_id, Year) |>
  summarise(Mean = mean(COUNT/TOTAL))
```

Compare this to mutate....

```{r, mhidden=TRUE}
#| label: groupby2
dat |>
  group_by(Reef_id, Year) |>
  mutate(Mean = mean(COUNT/TOTAL))
```


## Subsets of data

### Subset columns (`select`)

![](../resources/tikz_select-1.png)

- Indicate the fields to include

```{r, mhidden=TRUE}
#| label: select
dat |>
  dplyr::select(Reef_id, site_name, Year, transect_id, type, COUNT, TOTAL) |> 
  head()
```

- Indicate fields to exclude

```{r, mhidden=TRUE}
#| label: select2
dat |>
  dplyr::select(-site_id, -site_latitude, -site_longitude, -survey_start_date, -survey_depth, -GROUP) |> 
  head()
```

- Indicate name predicates

```{r, mhidden=TRUE}
#| label: select3
dat |>
  dplyr::select(starts_with("site")) |> 
  head()
```

```{r, mhidden=TRUE}
#| label: select4
dat |>
  dplyr::select(ends_with("id")) |> 
  head()
```

```{r, mhidden=TRUE}
#| label: select5
dat |>
  dplyr::select(contains("_")) |> 
  head()
```

```{r, mhidden=TRUE}
#| label: select6
dat |>
  dplyr::select(matches("^site.*|^survey.*")) |> 
  head()
```

- We can also use `select` to reorder the columns.

```{r, mhidden=TRUE}
#| label: select7
dat |>
  dplyr::select(Year,
    COUNT,
    TOTAL,
    starts_with("site"),
    everything(),
    -matches("latitude|longitude")) |> 
  head()
```

- Or we could select all the numeric fields

```{r, mhidden=TRUE}
#| label: select8
dat |>
  dplyr::select(where(is.numeric)) |> 
  head()
```

- Finally, `dplr::select()` can also be used to rename columns

```{r, mhidden=TRUE}
#| label: select9
dat |>
  dplyr::select(count = COUNT, total = TOTAL) |> 
  head()
```

Note, in the above, it renames while subsetting. To perform a rename
without needing to select all the columns, there is a `rename`
function.

```{r, mhidden=TRUE}
#| label: rename1
dat |>
  dplyr::rename(count = COUNT, total = TOTAL) |> 
  as.data.frame() |> 
  head()
```

- To select a single column, there is `pull` functon.

```{r, mhidden=TRUE}
#| label: pull1
dat |>
  dplyr::pull(COUNT) |> 
  head()
```

### Subset by rows (`filter`)

![](../resources/tikz_filter-1.png)

- By category level

```{r, mhidden=TRUE}
#| label: filter1
dat |>
  dplyr::filter(site_name %in% c("Opal Reef Site 1", "Opal Reef Site 2")) |> 
  as.data.frame() |> 
  head()
```

- By a numeric

```{r, mhidden=TRUE}
#| label: filter2
dat |>
  dplyr::filter(COUNT > 40) |> 
  as.data.frame() |> 
  head()
```

```{r, mhidden=TRUE}
#| label: filter3
dat |>
  dplyr::filter(COUNT/TOTAL > 0.4) |> 
  as.data.frame() |> 
  head()
```

- By between (for numeric)

```{r, mhidden=TRUE}
#| label: filter4
dat |>
  dplyr::filter(between(COUNT/TOTAL, 0.3, 0.4)) |> 
  as.data.frame() |> 
  head()
```

- By multiple criterion (AND)

```{r, mhidden=TRUE}
#| label: filter5
dat |>
  dplyr::filter(type == "point_machine_classification",
    between(COUNT/TOTAL, 0.3, 0.4)) |> 
  as.data.frame() |> 
  head()
```

- By multiple criterion (OR)

```{r, mhidden=TRUE}
#| label: filter6
dat |>
  dplyr::filter(type == "point_machine_classification" |
    between(COUNT/TOTAL, 0.3, 0.4)) |> 
  as.data.frame() |> 
  head()
```

#### Effects of filtering on factor levels

```{r, mhidden=TRUE}
#| label: filter7
dat |>
  mutate(site_name = factor(site_name)) |> 
  pull(site_name) |>
  levels()

dat |>
  mutate(site_name = factor(site_name)) |> 
  dplyr::filter(COUNT > 40) |> 
  pull(site_name) |>
  levels()

dat |>
  mutate(site_name = factor(site_name)) |> 
  dplyr::filter(COUNT > 40) |>
  droplevels() |> 
  pull(site_name) |>
  levels()
```

## Reshaping data

### Long to wide

![](../resources/tikz_pivot2-1.png)

```{r, mhidden=TRUE}
#| label: pivot1
dat1 <- 
  dat |>
  pivot_wider(id_cols = everything(),
    names_from = type,
    values_from = COUNT) |>
  as.data.frame() |>
  head()
dat1
```

### Wide to long

![](../resources/tikz_pivot-1.png)

```{r, mhidden=TRUE}
#| label: pivot2
dat1 |>
  pivot_longer(cols = starts_with("point"),
    names_to = "type",
    values_to = "COUNT") |>
  as.data.frame() |>
  head()
```

## Merging (`_join`ing) data sets

```{r, mhidden=TRUE}
#| label: join
dat_3 <- 
  dat |>
  dplyr::select(-site_longitude, -site_latitude)
dat_3

dat_4 <-
  dat |>
  dplyr::select(site_id, site_longitude, site_latitude) |>
  distinct()
dat_4

```

```{r, mhidden=TRUE}
#| label: join1

dat_3 |>
  left_join(dat_4, by = "site_id")
```


## Visualisations


```{r, mhidden=TRUE}
#| label: vis1

dat |>
  filter(type == "point_machine_classification") |> 
  ggplot(aes(y =  COUNT/TOTAL, x = survey_start_date, colour = factor(survey_depth))) +
  geom_point() +
  geom_line(aes(group = transect_id)) + 
  facet_grid(~Reef_id + site_name)
```

## Mapping


```{r, mhidden=TRUE}
#| label: map1

dat.sites <-
  dat |>
  group_by(site_id, site_name) |>
  summarise(
    Lat = mean(site_latitude),
    Long = mean(site_longitude)
  ) |>
  ungroup() |> 
  st_as_sf(coords = c("Long", "Lat"),
    remove = FALSE,
    crs =  4326)

bbox <- dat.sites |>
  st_buffer(dist = units::as_units(100, "km")) |> 
  st_bbox() 

aus <- rnaturalearth::ne_countries(scale =  10, country = "Australia", returnclass = "sf")
reefs <- read_sf("../data/GIS/reef_500_poly.shp")

cities <- world.cities |>
  filter(country.etc == "Australia")

dat.sites |>
  ggplot() +
  geom_sf(data = reefs, fill = "lightblue") +
  geom_sf(data = aus) +
  geom_point(data = cities, aes(y = lat, x = long)) + 
  geom_text(data = cities, aes(y = lat, x = long - 0.05,
    label =  name),
    hjust = 1) + 
  geom_sf() +
  ggspatial::annotation_north_arrow(location =  "tr") +
  ggspatial::annotation_scale() +
  coord_sf(xlim = bbox[c("xmin", "xmax")],
    ylim = bbox[c("ymin", "ymax")]) +
  theme_bw() +
  theme(axis.title = element_blank())
```
